export variables from from lab


--------------------------------------------------------------------------------------------------------------------------------


# Enable required Google Cloud services for compute, containers, dataflow, bigquery, pubsub, and healthcare
gcloud services enable compute.googleapis.com container.googleapis.com dataflow.googleapis.com bigquery.googleapis.com pubsub.googleapis.com healthcare.googleapis.com

# Create a Cloud Healthcare dataset in the specified region
gcloud healthcare datasets create dataset1 --location=$REGION

# Wait 30 seconds to ensure dataset creation is completed
sleep 30

# Get the current project ID
export PROJECT_ID=$(gcloud config list --format 'value(core.project)')

# Get the project number for use in service account bindings
export PROJECT_NUMBER=$(gcloud projects list --filter=projectId:$PROJECT_ID --format="value(projectNumber)")

# Grant BigQuery admin role to the Healthcare service account
gcloud projects add-iam-policy-binding $PROJECT_ID --member=serviceAccount:service-$PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com --role=roles/bigquery.admin

# Grant object admin role to allow access to storage objects
gcloud projects add-iam-policy-binding $PROJECT_ID \
--member=serviceAccount:service-$PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com \
--role=roles/storage.objectAdmin

# Grant dataset admin role to manage Healthcare datasets
gcloud projects add-iam-policy-binding $PROJECT_ID \
--member=serviceAccount:service-$PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com \
--role=roles/healthcare.datasetAdmin

# Grant DICOM store admin role for managing DICOM stores
gcloud projects add-iam-policy-binding $PROJECT_ID \
--member=serviceAccount:service-$PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com \
--role=roles/healthcare.dicomStoreAdmin

# Grant storage object creator role for uploading DICOM data to Cloud Storage
gcloud projects add-iam-policy-binding $PROJECT_ID \
--member=serviceAccount:service-$PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com \
--role=roles/storage.objectCreator

# Enable DATA_READ and DATA_WRITE audit logging for Cloud Healthcare API
gcloud projects get-iam-policy $PROJECT_ID > policy.yaml

# Append audit logging configurations for the Healthcare API to the IAM policy file
cat <<EOF >> policy.yaml
auditConfigs:
- auditLogConfigs:
  - logType: DATA_READ
  - logType: DATA_WRITE
  service: healthcare.googleapis.com
EOF

# Apply the updated IAM policy to enable audit logs
gcloud projects set-iam-policy $PROJECT_ID policy.yaml

# Create a DICOM store inside the previously created dataset
gcloud beta healthcare dicom-stores create $DICOM_STORE_ID --dataset=$DATASET_ID --location=$REGION

# Use curl to create another DICOM store (dicomstore2) via REST API
curl -X POST \
     -H "Authorization: Bearer "$(sudo gcloud auth print-access-token) \
     -H "Content-Type: application/json; charset=utf-8" \
"https://healthcare.googleapis.com/v1beta1/projects/$PROJECT_ID/locations/$REGION/datasets/$DATASET_ID/dicomStores?dicomStoreId=dicomstore2"

# Pause to ensure store creation completes
sleep 10

# Import DICOM images from a public GCS bucket into the DICOM store
gcloud beta healthcare dicom-stores import gcs $DICOM_STORE_ID --dataset=$DATASET_ID --location=$REGION --gcs-uri=gs://spls/gsp626/LungCT-Diagnosis/R_004/*

# De-identify the imported DICOM data using the Healthcare API (de-identification job)
curl -X POST \
    -H "Authorization: Bearer "$(gcloud auth print-access-token) \
    -H "Content-Type: application/json; charset=utf-8" \
    --data "{
      'destinationDataset': 'projects/$PROJECT_ID/locations/$REGION/datasets/de-id',
      'config': {
        'dicom': {
          'filterProfile': 'ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE'
        },
        'image': {
          'textRedactionMode': 'REDACT_NO_TEXT'
        }
      }
    }" "https://healthcare.googleapis.com/v1beta1/projects/$PROJECT_ID/locations/$REGION/datasets/$DATASET_ID:deidentify"

# Check the status of the de-identification operation using the operation ID
curl -X GET \
"https://healthcare.googleapis.com/v1beta1/projects/$PROJECT_ID/locations/$REGION/datasets/$DATASET_ID/operations/<operation-id>" \
-H "Authorization: Bearer "$(sudo gcloud auth print-access-token) \
-H 'Content-Type: application/json; charset=utf-8'

# Create a new Cloud Storage bucket using the default project ID
export BUCKET_ID="gs://$DEVSHELL_PROJECT_ID"
gsutil mb $BUCKET_ID

# Define the Healthcare service account
SERVICE_ACCOUNT="service-$PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com"

# Grant the service account permission to upload objects into the GCS bucket
gsutil iam ch serviceAccount:$SERVICE_ACCOUNT:roles/storage.objectCreator gs://$DEVSHELL_PROJECT_ID

# Export the DICOM store to GCS in JPEG format with a specific transfer syntax
gcloud beta healthcare dicom-stores export gcs $DICOM_STORE_ID --dataset=$DATASET_ID --gcs-uri-prefix=$BUCKET_ID --mime-type="image/jpeg; transfer-syntax=1.2.840.10008.1.2.4.50" --location=$REGION

# Export the DICOM store to GCS in PNG format
gcloud beta healthcare dicom-stores export gcs $DICOM_STORE_ID --dataset=$DATASET_ID --gcs-uri-prefix=$BUCKET_ID --mime-type="image/png" --location=$REGION

# Set variables again in case script is reused later
export PROJECT_ID=`gcloud config get-value project`
export DATASET_ID=dataset1
export DICOM_STORE_ID=dicomstore1

# Re-import the same DICOM data (e.g., to test roundtrip or reprocess)
gcloud beta healthcare dicom-stores import gcs $DICOM_STORE_ID --dataset=$DATASET_ID --location=$REGION --gcs-uri=gs://spls/gsp626/LungCT-Diagnosis/R_004/*
